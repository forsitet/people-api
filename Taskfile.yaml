version: '3'

vars:
  GO_VERSION: '1.24'
  GOLANGCI_LINT_VERSION: 'v2.1.5'
  GCI_VERSION: 'v0.13.6'
  GOFUMPT_VERSION: 'v0.8.0'
  OGEN_VERSION: 'v1.12.0'
  YQ_VERSION: 'v4.45.2'

  BIN_DIR: '{{.ROOT_DIR}}/bin'
  GOLANGCI_LINT: '{{.BIN_DIR}}/golangci-lint'
  GCI: '{{.BIN_DIR}}/gci'
  GOFUMPT: '{{.BIN_DIR}}/gofumpt'
  OGEN: '{{.BIN_DIR}}/ogen'
  YQ: '{{.BIN_DIR}}/yq'

  NODE_MODULES_DIR: '{{.ROOT_DIR}}/node_modules/.bin'
  REDOCLY: '{{.NODE_MODULES_DIR}}/redocly'

  OPEN_API_ORDER_V1_BASE: '{{.ROOT_DIR}}/shared/api/people/v1/people.openapi.yaml'
  OPEN_API_ORDER_V1_BUNDLE: '{{.ROOT_DIR}}/shared/api/bundles/people.openapi.v1.bundle.yaml'
  
  OPEN_API_FILES: '{{.ROOT_DIR}}/shared/api/bundles'

tasks:
  install-formatters:
    desc: "Устанавливает форматтеры gci и gofumpt в ./bin"
    summary: |
      Эта задача проверяет наличие инструментов форматирования кода gofumpt и gci в директории bin.
      Если инструменты не найдены, они будут автоматически установлены с указанными версиями.
      
      Используется:
        - gofumpt: для форматирования кода Go
        - gci: для сортировки импортов Go
    cmds:
      - |
        [ -f {{.GOFUMPT}} ] || {
          echo 'Устанавливаем gofumpt {{.GOFUMPT_VERSION}}...'
          GOBIN={{.BIN_DIR}} go install mvdan.cc/gofumpt@{{.GOFUMPT_VERSION}}
        }
        [ -f {{.GCI}} ] || {
          echo 'Устанавливаем gci {{.GCI_VERSION}}...'
          GOBIN={{.BIN_DIR}} go install github.com/daixiang0/gci@{{.GCI_VERSION}}
        }
    status:
      - test -x {{.GOFUMPT}}
      - test -x {{.GCI}}

  format:
    desc: "Форматирует весь проект gofumpt + gci, исключая mocks"
    summary: |
      Форматирует все Go-файлы проекта с использованием gofumpt для стандартизации кода
      и gci для сортировки импортов, исключая файлы в директориях mocks.
      
      Использует инструменты:
        - gofumpt: для стандартизации форматирования
        - gci: для сортировки импортов по стандартным группам
    deps: [ install-formatters ]
    cmds:
      - |
        echo "Форматируем через gofumpt ..."
        find . -type f -name '*.go' ! -path '*/mocks/*' ! -path '*/node_modules/*' -exec {{.GOFUMPT}} -extra -w {} +
      - |
        echo "Сортируем импорты через gci ..."
        find . -type f -name '*.go' ! -path '*/mocks/*' ! -path '*/node_modules/*' -exec {{.GCI}} write -s standard -s default -s "prefix(people)" {} +

  install-golangci-lint:
    desc: "Устанавливает golangci-lint в каталог bin"
    summary: |
      Проверяет наличие golangci-lint в директории bin.
      Если инструмент не найден, автоматически устанавливает его через go install.
      
      Устанавливаемая версия: {{.GOLANGCI_LINT_VERSION}}
    cmds:
      - |
        [ -f {{.GOLANGCI_LINT}} ] || {
          mkdir -p {{.BIN_DIR}}
          echo "Устанавливаем golangci-lint {{.GOLANGCI_LINT_VERSION}}..."
          GOBIN={{.BIN_DIR}} go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@{{.GOLANGCI_LINT_VERSION}}
        }
    status:
      - test -x {{.GOLANGCI_LINT}}

  lint:
    desc: "Запускает golangci-lint для всего проекта"
    summary: |
      Запускает линтер golangci-lint для всего проекта.
      Линтер проверяет код на соответствие стандартам качества и лучшим практикам.
      Проверка включает проверку безопасности через gosec (встроенный в golangci-lint).
      
      Зависимости:
        - install-golangci-lint: автоматически устанавливает линтер
    deps: [ install-golangci-lint ]
    cmds:
      - |
        echo "Линтим проект ..."
        {{.GOLANGCI_LINT}} run --config=.golangci.yaml

  ogen:install:
    desc: "Скачивает ogen в папку bin"
    cmds:
      - |
        [ -f {{.OGEN}} ] || {
          mkdir -p {{.BIN_DIR}}
          GOBIN={{.BIN_DIR}} go install github.com/ogen-go/ogen/cmd/ogen@{{.OGEN_VERSION}}
        }

  ogen:gen:
    desc: "Генерация Go-кода из всех OpenAPI-деклараций с x-ogen"
    deps: [ ogen:install, yq:install ]
    cmds:
      - | 
        TARGET=$({{.YQ}} '.x-ogen.target' {{.OPEN_API_ORDER_V1_BASE}})
        PACKAGE=$({{.YQ}} '.x-ogen.package' {{.OPEN_API_ORDER_V1_BASE}})
        {{.OGEN}} --target "$TARGET" --package "$PACKAGE" --clean {{.OPEN_API_ORDER_V1_BASE}} || exit 1

  deps:update:
    desc: "Обновление зависимостей в go.mod"
    cmds:
      - |
        echo "Обновление зависимостей в go.mod"
        go mod tidy -compat=1.24

  yq:install:
    desc: "Устанавливает yq в bin/ при необходимости"
    cmds:
      - |
        [ -f {{.YQ}} ] || {
          echo 'Installing yq...'
          GOBIN={{.BIN_DIR}} go install github.com/mikefarah/yq/v4@{{.YQ_VERSION}}
        }

  redocly-cli:install:
    desc: Установить локально Redocly CLI
    cmds:
      - |
        [ -f {{.REDOCLY}} ] || {
          npm ci
          npm init -y
        } || {
          echo "Устанавливаем redocly-cli..."
          npm install
        }

  redocly-cli:bundle:
    desc: Собрать OpenAPI в один файл через локальный redocly
    deps: [ redocly-cli:install ]
    cmds:
      - '{{.REDOCLY}} bundle {{.OPEN_API_ORDER_V1_BASE}} -o {{.OPEN_API_ORDER_V1_BUNDLE}}'
    
  docker:build:
    desc: "Собирает Docker образ на основе Dockerfile"
    cmds:
      - |
        echo "Собираем Docker образ..."
        docker build -t people_service:latest .
        echo "Образ успешно собран"

  docker:run:
    desc: "Запускает собранный Docker образ"
    cmds:
      - |
        echo "Запускаем Docker образ..."
        docker run -p 8080:8080 people_service

  docker:compose:up:
    desc: "Запускает Docker Compose"
    cmds:
      - |
        echo "Запускаем Docker Compose..."
        docker compose up -d

  docker:compose:build:
    desc: "Собирает контейнеры Docker Compose с нуля"
    cmds:
      - |
        echo "Собираем контейнеры Docker Compose..."
        docker compose build --no-cache
        echo "Сборка успешно завершена"

  docker:compose:down:
    desc: "Останавливает и удаляет контейнеры Docker Compose"
    cmds:
      - |
        echo "Останавливаем контейнеры Docker Compose..."
        docker compose down -v
        echo "Контейнеры остановлены"
  