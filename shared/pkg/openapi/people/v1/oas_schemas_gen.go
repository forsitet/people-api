// Code generated by ogen, DO NOT EDIT.

package people_v1

import (
	"github.com/go-faster/errors"
)

// AddEmailOK is response for AddEmail operation.
type AddEmailOK struct{}

func (*AddEmailOK) addEmailRes() {}

// AddFriendOK is response for AddFriend operation.
type AddFriendOK struct{}

func (*AddFriendOK) addFriendRes() {}

type AddFriendReq struct {
	FriendID OptInt `json:"friend_id"`
}

// GetFriendID returns the value of FriendID.
func (s *AddFriendReq) GetFriendID() OptInt {
	return s.FriendID
}

// SetFriendID sets the value of FriendID.
func (s *AddFriendReq) SetFriendID(val OptInt) {
	s.FriendID = val
}

// Ref: #
type AlreadyExists struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *AlreadyExists) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *AlreadyExists) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *AlreadyExists) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *AlreadyExists) SetMessage(val string) {
	s.Message = val
}

func (*AlreadyExists) addEmailRes() {}

// Ref: #
type BadRequest struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadRequest) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadRequest) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadRequest) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadRequest) SetMessage(val string) {
	s.Message = val
}

func (*BadRequest) addFriendRes()    {}
func (*BadRequest) createPersonRes() {}
func (*BadRequest) getFriendsRes()   {}
func (*BadRequest) listPeopleRes()   {}
func (*BadRequest) searchPersonRes() {}
func (*BadRequest) updatePersonRes() {}

// Ref: #
type CreatePerson struct {
	// ID человека.
	ID int `json:"id"`
}

// GetID returns the value of ID.
func (s *CreatePerson) GetID() int {
	return s.ID
}

// SetID sets the value of ID.
func (s *CreatePerson) SetID(val int) {
	s.ID = val
}

func (*CreatePerson) createPersonRes() {}

// Ref: #
type Email struct {
	// Email человека.
	Email string `json:"email"`
}

// GetEmail returns the value of Email.
func (s *Email) GetEmail() string {
	return s.Email
}

// SetEmail sets the value of Email.
func (s *Email) SetEmail(val string) {
	s.Email = val
}

type GetFriendsOKApplicationJSON []Person

func (*GetFriendsOKApplicationJSON) getFriendsRes() {}

// Ref: #
type InternalServer struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *InternalServer) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *InternalServer) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *InternalServer) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *InternalServer) SetMessage(val string) {
	s.Message = val
}

func (*InternalServer) addEmailRes()     {}
func (*InternalServer) addFriendRes()    {}
func (*InternalServer) createPersonRes() {}
func (*InternalServer) getFriendsRes()   {}
func (*InternalServer) listPeopleRes()   {}
func (*InternalServer) searchPersonRes() {}
func (*InternalServer) updatePersonRes() {}

type ListPeopleOKApplicationJSON []Person

func (*ListPeopleOKApplicationJSON) listPeopleRes() {}

// Ref: #
type NotFound struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFound) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFound) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFound) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFound) SetMessage(val string) {
	s.Message = val
}

func (*NotFound) addEmailRes()     {}
func (*NotFound) addFriendRes()    {}
func (*NotFound) getFriendsRes()   {}
func (*NotFound) searchPersonRes() {}
func (*NotFound) updatePersonRes() {}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostCreatePersonGender returns new OptPostCreatePersonGender with value set to v.
func NewOptPostCreatePersonGender(v PostCreatePersonGender) OptPostCreatePersonGender {
	return OptPostCreatePersonGender{
		Value: v,
		Set:   true,
	}
}

// OptPostCreatePersonGender is optional PostCreatePersonGender.
type OptPostCreatePersonGender struct {
	Value PostCreatePersonGender
	Set   bool
}

// IsSet returns true if OptPostCreatePersonGender was set.
func (o OptPostCreatePersonGender) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostCreatePersonGender) Reset() {
	var v PostCreatePersonGender
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostCreatePersonGender) SetTo(v PostCreatePersonGender) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostCreatePersonGender) Get() (v PostCreatePersonGender, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostCreatePersonGender) Or(d PostCreatePersonGender) PostCreatePersonGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePersonGender returns new OptUpdatePersonGender with value set to v.
func NewOptUpdatePersonGender(v UpdatePersonGender) OptUpdatePersonGender {
	return OptUpdatePersonGender{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePersonGender is optional UpdatePersonGender.
type OptUpdatePersonGender struct {
	Value UpdatePersonGender
	Set   bool
}

// IsSet returns true if OptUpdatePersonGender was set.
func (o OptUpdatePersonGender) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePersonGender) Reset() {
	var v UpdatePersonGender
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePersonGender) SetTo(v UpdatePersonGender) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePersonGender) Get() (v UpdatePersonGender, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePersonGender) Or(d UpdatePersonGender) UpdatePersonGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #
type Person struct {
	// ID человека.
	ID int `json:"id"`
	// Имя человека.
	Name string `json:"name"`
	// Фамилия человека.
	Surname string `json:"surname"`
	// Отчество человека.
	Patronymic string `json:"patronymic"`
	// Пол человека.
	Gender string `json:"gender"`
	// Национальность человека.
	Nationality string `json:"nationality"`
	// Возраст человека.
	Age int `json:"age"`
	// Список email адресов человека.
	Emails []string `json:"emails"`
}

// GetID returns the value of ID.
func (s *Person) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *Person) GetName() string {
	return s.Name
}

// GetSurname returns the value of Surname.
func (s *Person) GetSurname() string {
	return s.Surname
}

// GetPatronymic returns the value of Patronymic.
func (s *Person) GetPatronymic() string {
	return s.Patronymic
}

// GetGender returns the value of Gender.
func (s *Person) GetGender() string {
	return s.Gender
}

// GetNationality returns the value of Nationality.
func (s *Person) GetNationality() string {
	return s.Nationality
}

// GetAge returns the value of Age.
func (s *Person) GetAge() int {
	return s.Age
}

// GetEmails returns the value of Emails.
func (s *Person) GetEmails() []string {
	return s.Emails
}

// SetID sets the value of ID.
func (s *Person) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Person) SetName(val string) {
	s.Name = val
}

// SetSurname sets the value of Surname.
func (s *Person) SetSurname(val string) {
	s.Surname = val
}

// SetPatronymic sets the value of Patronymic.
func (s *Person) SetPatronymic(val string) {
	s.Patronymic = val
}

// SetGender sets the value of Gender.
func (s *Person) SetGender(val string) {
	s.Gender = val
}

// SetNationality sets the value of Nationality.
func (s *Person) SetNationality(val string) {
	s.Nationality = val
}

// SetAge sets the value of Age.
func (s *Person) SetAge(val int) {
	s.Age = val
}

// SetEmails sets the value of Emails.
func (s *Person) SetEmails(val []string) {
	s.Emails = val
}

func (*Person) searchPersonRes() {}

// Ref: #
type PostCreatePerson struct {
	// Имя человека.
	Name string `json:"name"`
	// Фамилия человека.
	Surname string `json:"surname"`
	// Отчество человека.
	Patronymic string `json:"patronymic"`
	// Пол человека (если не указан, будет получен
	// автоматически).
	Gender OptPostCreatePersonGender `json:"gender"`
	// Национальность человека (если не указана, будет
	// получена автоматически).
	Nationality OptString `json:"nationality"`
	// Возраст человека (если не указан, будет получен
	// автоматически).
	Age OptInt `json:"age"`
	// Список email адресов человека.
	Emails []string `json:"emails"`
}

// GetName returns the value of Name.
func (s *PostCreatePerson) GetName() string {
	return s.Name
}

// GetSurname returns the value of Surname.
func (s *PostCreatePerson) GetSurname() string {
	return s.Surname
}

// GetPatronymic returns the value of Patronymic.
func (s *PostCreatePerson) GetPatronymic() string {
	return s.Patronymic
}

// GetGender returns the value of Gender.
func (s *PostCreatePerson) GetGender() OptPostCreatePersonGender {
	return s.Gender
}

// GetNationality returns the value of Nationality.
func (s *PostCreatePerson) GetNationality() OptString {
	return s.Nationality
}

// GetAge returns the value of Age.
func (s *PostCreatePerson) GetAge() OptInt {
	return s.Age
}

// GetEmails returns the value of Emails.
func (s *PostCreatePerson) GetEmails() []string {
	return s.Emails
}

// SetName sets the value of Name.
func (s *PostCreatePerson) SetName(val string) {
	s.Name = val
}

// SetSurname sets the value of Surname.
func (s *PostCreatePerson) SetSurname(val string) {
	s.Surname = val
}

// SetPatronymic sets the value of Patronymic.
func (s *PostCreatePerson) SetPatronymic(val string) {
	s.Patronymic = val
}

// SetGender sets the value of Gender.
func (s *PostCreatePerson) SetGender(val OptPostCreatePersonGender) {
	s.Gender = val
}

// SetNationality sets the value of Nationality.
func (s *PostCreatePerson) SetNationality(val OptString) {
	s.Nationality = val
}

// SetAge sets the value of Age.
func (s *PostCreatePerson) SetAge(val OptInt) {
	s.Age = val
}

// SetEmails sets the value of Emails.
func (s *PostCreatePerson) SetEmails(val []string) {
	s.Emails = val
}

// Пол человека (если не указан, будет получен
// автоматически).
type PostCreatePersonGender string

const (
	PostCreatePersonGender_0 PostCreatePersonGender = "Мужской"
	PostCreatePersonGender_1 PostCreatePersonGender = "Женский"
)

// AllValues returns all PostCreatePersonGender values.
func (PostCreatePersonGender) AllValues() []PostCreatePersonGender {
	return []PostCreatePersonGender{
		PostCreatePersonGender_0,
		PostCreatePersonGender_1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PostCreatePersonGender) MarshalText() ([]byte, error) {
	switch s {
	case PostCreatePersonGender_0:
		return []byte(s), nil
	case PostCreatePersonGender_1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PostCreatePersonGender) UnmarshalText(data []byte) error {
	switch PostCreatePersonGender(data) {
	case PostCreatePersonGender_0:
		*s = PostCreatePersonGender_0
		return nil
	case PostCreatePersonGender_1:
		*s = PostCreatePersonGender_1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #
type UpdatePerson struct {
	// Имя человека.
	Name OptString `json:"name"`
	// Фамилия человека.
	Surname OptString `json:"surname"`
	// Отчество человека.
	Patronymic OptString `json:"patronymic"`
	// Пол человека.
	Gender OptUpdatePersonGender `json:"gender"`
	// Национальность человека.
	Nationality OptString `json:"nationality"`
	// Возраст человека.
	Age OptInt `json:"age"`
	// Список email адресов человека.
	Emails []string `json:"emails"`
}

// GetName returns the value of Name.
func (s *UpdatePerson) GetName() OptString {
	return s.Name
}

// GetSurname returns the value of Surname.
func (s *UpdatePerson) GetSurname() OptString {
	return s.Surname
}

// GetPatronymic returns the value of Patronymic.
func (s *UpdatePerson) GetPatronymic() OptString {
	return s.Patronymic
}

// GetGender returns the value of Gender.
func (s *UpdatePerson) GetGender() OptUpdatePersonGender {
	return s.Gender
}

// GetNationality returns the value of Nationality.
func (s *UpdatePerson) GetNationality() OptString {
	return s.Nationality
}

// GetAge returns the value of Age.
func (s *UpdatePerson) GetAge() OptInt {
	return s.Age
}

// GetEmails returns the value of Emails.
func (s *UpdatePerson) GetEmails() []string {
	return s.Emails
}

// SetName sets the value of Name.
func (s *UpdatePerson) SetName(val OptString) {
	s.Name = val
}

// SetSurname sets the value of Surname.
func (s *UpdatePerson) SetSurname(val OptString) {
	s.Surname = val
}

// SetPatronymic sets the value of Patronymic.
func (s *UpdatePerson) SetPatronymic(val OptString) {
	s.Patronymic = val
}

// SetGender sets the value of Gender.
func (s *UpdatePerson) SetGender(val OptUpdatePersonGender) {
	s.Gender = val
}

// SetNationality sets the value of Nationality.
func (s *UpdatePerson) SetNationality(val OptString) {
	s.Nationality = val
}

// SetAge sets the value of Age.
func (s *UpdatePerson) SetAge(val OptInt) {
	s.Age = val
}

// SetEmails sets the value of Emails.
func (s *UpdatePerson) SetEmails(val []string) {
	s.Emails = val
}

// Пол человека.
type UpdatePersonGender string

const (
	UpdatePersonGender_0 UpdatePersonGender = "Мужской"
	UpdatePersonGender_1 UpdatePersonGender = "Женский"
)

// AllValues returns all UpdatePersonGender values.
func (UpdatePersonGender) AllValues() []UpdatePersonGender {
	return []UpdatePersonGender{
		UpdatePersonGender_0,
		UpdatePersonGender_1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdatePersonGender) MarshalText() ([]byte, error) {
	switch s {
	case UpdatePersonGender_0:
		return []byte(s), nil
	case UpdatePersonGender_1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdatePersonGender) UnmarshalText(data []byte) error {
	switch UpdatePersonGender(data) {
	case UpdatePersonGender_0:
		*s = UpdatePersonGender_0
		return nil
	case UpdatePersonGender_1:
		*s = UpdatePersonGender_1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// UpdatePersonOK is response for UpdatePerson operation.
type UpdatePersonOK struct{}

func (*UpdatePersonOK) updatePersonRes() {}
