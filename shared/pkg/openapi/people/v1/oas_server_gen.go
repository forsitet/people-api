// Code generated by ogen, DO NOT EDIT.

package people_v1

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddEmail implements addEmail operation.
	//
	// Добавить email человеку.
	//
	// POST /api/v1/people/{id}/emails
	AddEmail(ctx context.Context, req *Email, params AddEmailParams) (AddEmailRes, error)
	// AddFriend implements addFriend operation.
	//
	// Добавить друга человеку.
	//
	// POST /api/v1/people/{id}/friends
	AddFriend(ctx context.Context, req *AddFriendReq, params AddFriendParams) (AddFriendRes, error)
	// CreatePerson implements createPerson operation.
	//
	// Создать нового человека.
	//
	// POST /api/v1/create
	CreatePerson(ctx context.Context, req *PostCreatePerson) (CreatePersonRes, error)
	// GetFriends implements getFriends operation.
	//
	// Получить список друзей человека.
	//
	// GET /api/v1/people/{id}/friends
	GetFriends(ctx context.Context, params GetFriendsParams) (GetFriendsRes, error)
	// ListPeople implements listPeople operation.
	//
	// Получить список всех людей.
	//
	// GET /api/v1/people
	ListPeople(ctx context.Context) (ListPeopleRes, error)
	// SearchPerson implements SearchPerson operation.
	//
	// Поиск человека по ID или фамилии (одно из).
	//
	// GET /api/v1/people/search
	SearchPerson(ctx context.Context, params SearchPersonParams) (SearchPersonRes, error)
	// UpdatePerson implements updatePerson operation.
	//
	// Изменить информацию о человеке.
	//
	// PATCH /api/v1/people/search
	UpdatePerson(ctx context.Context, req *UpdatePerson, params UpdatePersonParams) (UpdatePersonRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
